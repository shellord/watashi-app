generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  username            String?        @unique
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  bio                 String?
  gender              Gender?
  status              Status         @default(ACTIVE)
  accounts            Account[]
  sessions            Session[]
  list                List[]
  followers           Follows[]      @relation("follower")
  following           Follows[]      @relation("following")
  comments            Comment[]
  myComments          Comment[]      @relation("author")
  activity            Activity[]
  notifications       Notification[] @relation("user")
  notificationActorOf Notification[] @relation("actor")
  isVerified          Boolean        @default(false)
  instagramUsername   String?
  snapchatUsername    String?
  twitterUsername     String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id        String    @id @default(cuid())
  name      String
  category  Category
  items     Item[]
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  activity  Activity?
  order     Int
}

model Item {
  id         String  @id @default(cuid())
  itemId     String
  title      String
  posterPath String?
  listId     String
  list       List    @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  userId    String
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id         String             @id @default(cuid())
  actorID    String
  targetId   String             @unique
  targetType ActivityTargetType
  verb       ActivityVerb
  createdAt  DateTime           @default(now())
  actor      User               @relation(fields: [actorID], references: [id], onDelete: Cascade)
  target     List               @relation(fields: [targetId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String                  @id @default(cuid())
  userId     String
  actorId    String
  seen       Boolean                 @default(false)
  targetId   String?
  targetType NotificationTargetType?
  verb       NotificationVerb
  read       DateTime?
  createdAt  DateTime                @default(now())
  user       User                    @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  actor      User                    @relation("actor", fields: [actorId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  ACTIVE
  BLOCKED
}

enum Category {
  MOVIE
  MUSIC
  BOOK
  TV
}

enum ActivityTargetType {
  LIST
  COMMENT
  USER
}

enum ActivityVerb {
  LIKED
  ADDED
  REPLY
  FOLLOW
  COMMENT
}

enum NotificationTargetType {
  LIST
  COMMENT
}

enum NotificationVerb {
  LIKED
  ADDED
  REPLY
  FOLLOW
  COMMENT
}
